import config from "@/pages.config";

const { generatedFilePath } = config;

export function pathToCamelCase(str: string): string {
	return str.replaceAll("/", "-").replace(/-([a-z])/g, (_, c) => c.toUpperCase());
}

export function writeGeneratedFile(pagePathsArray: string[], RoutesMap: Map<any, any>): void {
	const content = `
// Path: ${generatedFilePath}\n
// Auto-generated by watch-pages.ts\n
declare global { type ClientRoutePath = ${pagePathsArray.map((path) => `"${path}"`).join(" | ")}; type ExtractRouteParams<T> = T extends \`\${infer _Start}:\${infer Param}/\${infer Rest}\`\n ? { [k in Param | keyof ExtractRouteParams<Rest>]: string } : T extends \`\${infer _Start}:\${infer Param}\` ? { [k in Param]: string } : { [k in string]: string }; type ExtractSearchParams<P> = P extends \`\${infer _Start}?\${infer Search}\` ? { [k in Search]: string } : { [k in string]: string }; type ClientRoutePathParam<P extends ClientRoutePath> = ExtractRouteParams<P>; type ClientRouteSearchParam<P extends ClientRoutePath> = ExtractSearchParams<P>; }\n
export const RoutesMap = ${JSON.stringify(Object.fromEntries(RoutesMap))};\n
export const pagePaths:ClientRoutePath[] = ${JSON.stringify(pagePathsArray)};
`;
	Bun.write(generatedFilePath, content);
}
